#РЕШЕНИЕ ПОСЛЕ РАЗБОРА

def generateHashtag(str)
  str.length > 1 && str.length <= 140 ? "#" + str.split.map { |x| x.capitalize }.join : false
=begin

length - определяем чтобы строка была не пустой и не длинной
далее тернарный оператор

split - разделяет строку используя указанный разделитель или разделитель по умолчанию
ПОДРОБНЕЕ ЗДЕСЬ https://ru.wikibooks.org/wiki/Ruby/%D0%A1%D0%BF%D1%80%D0%B0%D0%B2%D0%BE%D1%87%D0%BD%D0%B8%D0%BA/String#String#split

map - Вызывает данный ЦИКЛ ПОВТОРЕНИЯ ДЛЯ КАЖДОГО БЛОКА  один раз для каждого элемента.
Создает новый массив, содержащий значения, возвращаемые блоком.
ПОДРОБНЕЕ ЗДЕСЬ https://ruby-doc.org/core-2.7.0/Array.html#method-i-map

capitalize - Возвращает копию str с преобразованием первого символа в верхний регистр, а остальных — в нижний.
ПОДРОБНЕЕ ЗДЕСЬ - https://apidock.com/ruby/String/capitalize

join - объединяет всю строку в одну без пробелов

=end
end

#ПЕРВОНАЧАЛЬНОЕ РЕШЕНИЕ
def generateHashtag(str)
  # ...
if str != "" #проверяем что строка не пустая
  if str.include? " " # проверяем что сторка содержит пробелы
  str = str.split(' ').to_a.map(&:capitalize).join #Делим строку на массив по разделителю " ", переводим в массив, преобразуем первый символ элемента в заглавную
# букву и объединяем все элементы в один
# (&:capitalize) - вместо { |x| x.capitalize }
    if str == "" # проверяем снова на пустую строку
    str = false
    else 
    str = '#'+str
    str.length > 140 ? str = false : str
    end
  else
    str = "##{str.split(' ').to_a.map(&:capitalize).join}"
    str.length > 140 ? str = false : str
    #str = false
  end
else
str = false
end
end

=begin

Сопоставление регулярных выражений в Ruby возвращает nil, когда выражение не совпадает. 
Когда это происходит, он возвращает индекс символа, в котором происходит совпадение. Например:

"foobar" =~ /bar/  # returns 3 # совпадение с 3 инлекса строки
"foobar" =~ /foo/  # returns 0 # совпадение с 0 инлекса строки
"foobar" =~ /zzz/  # returns nil # нет совпадений в строки

=end
